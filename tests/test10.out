; ModuleID = 'integraph'
source_filename = "integraph"

@f = global double 0.000000e+00
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @printbig(i32)

define double @main1(double %f) {
entry:
  %f1 = alloca double, align 8
  store double %f, double* %f1, align 8
  %f2 = load double, double* %f1, align 8
  %tmp = fsub double %f2, 9.023000e+01
  ret double %tmp
}

define void @main() {
entry:
  store double 0x401F333333333333, double* @f, align 8
  %f = load double, double* @f, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), double %f)
  %f1 = load double, double* @f, align 8
  %main1_result = call double @main1(double %f1)
  store double %main1_result, double* @f, align 8
  %f2 = load double, double* @f, align 8
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), double %f2)
  ret void
}
