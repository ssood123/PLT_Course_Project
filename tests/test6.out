; ModuleID = 'integraph'
source_filename = "integraph"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@tmp = private unnamed_addr constant [5 x i8] c"true\00", align 1
@tmp.6 = private unnamed_addr constant [6 x i8] c"false\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @printbig(i32)

define void @main() {
entry:
  %b = alloca i1, align 1
  %i = alloca i32, align 4
  store i1 true, i1* %b, align 1
  %b1 = load i1, i1* %b, align 1
  call void @isTrue(i1 %b1)
  store i32 0, i32* %i, align 4
  br label %while

while:                                            ; preds = %merge, %entry
  %i5 = load i32, i32* %i, align 4
  %tmp6 = icmp ne i32 %i5, 7
  br i1 %tmp6, label %while_body, label %merge7

while_body:                                       ; preds = %while
  %i2 = load i32, i32* %i, align 4
  %tmp = add i32 %i2, 1
  store i32 %tmp, i32* %i, align 4
  %i3 = load i32, i32* %i, align 4
  %tmp4 = icmp eq i32 %i3, 4
  br i1 %tmp4, label %then, label %else

merge:                                            ; preds = %else, %then
  br label %while

then:                                             ; preds = %while_body
  store i1 false, i1* %b, align 1
  br label %merge

else:                                             ; preds = %while_body
  br label %merge

merge7:                                           ; preds = %while
  %b8 = load i1, i1* %b, align 1
  call void @isTrue(i1 %b8)
  ret void
}

define void @isTrue(i1 %b) {
entry:
  %b1 = alloca i1, align 1
  store i1 %b, i1* %b1, align 1
  %b2 = load i1, i1* %b1, align 1
  br i1 %b2, label %then, label %else

merge:                                            ; preds = %else, %then
  ret void

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @tmp, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tmp.6, i32 0, i32 0))
  br label %merge
}
