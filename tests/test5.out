; ModuleID = 'integraph'
source_filename = "integraph"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@tmp = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@tmp.3 = private unnamed_addr constant [3 x i8] c"No\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @printbig(i32)

define void @main() {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %i1 = load i32, i32* %i, align 4
  %tmp = icmp ne i32 %i1, 0
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  %i7 = load i32, i32* %i, align 4
  %doMore_result = call i32 @doMore(i32 %i7)
  store i32 %doMore_result, i32* %j, align 4
  %j8 = load i32, i32* %j, align 4
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %j8)
  ret void

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @tmp, i32 0, i32 0))
  %i2 = load i32, i32* %i, align 4
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %i2)
  br label %merge

else:                                             ; preds = %entry
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @tmp.3, i32 0, i32 0))
  %i5 = load i32, i32* %i, align 4
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %i5)
  br label %merge
}

define i32 @doMore(i32 %a) {
entry:
  %a1 = alloca i32, align 4
  store i32 %a, i32* %a1, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %a3 = load i32, i32* %a1, align 4
  %tmp4 = icmp slt i32 %a3, 4
  br i1 %tmp4, label %while_body, label %merge

while_body:                                       ; preds = %while
  %a2 = load i32, i32* %a1, align 4
  %tmp = add i32 %a2, 1
  store i32 %tmp, i32* %a1, align 4
  br label %while

merge:                                            ; preds = %while
  %a5 = load i32, i32* %a1, align 4
  ret i32 %a5
}
