; ModuleID = 'integraph'
source_filename = "integraph"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @printbig(i32)

define void @main() {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca i1, align 1
  store i32 70, i32* %j, align 4
  store i32 80, i32* %i, align 4
  %i1 = load i32, i32* %i, align 4
  %tmp = icmp sgt i32 %i1, 100
  %tmp2 = xor i1 %tmp, true
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %tmp2)
  %i3 = load i32, i32* %i, align 4
  %tmp4 = icmp sgt i32 %i3, 100
  %j5 = load i32, i32* %j, align 4
  %tmp6 = icmp slt i32 %j5, 80
  %tmp7 = and i1 %tmp4, %tmp6
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %tmp7)
  %i9 = load i32, i32* %i, align 4
  %tmp10 = icmp sgt i32 %i9, 100
  %j11 = load i32, i32* %j, align 4
  %tmp12 = icmp slt i32 %j11, 80
  %tmp13 = or i1 %tmp10, %tmp12
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %tmp13)
  ret void
}
